<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.neo.blog.service.*"/>

    <!-- 加载数据库配置属性 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="false"/>

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
        <property name="dir" value="META-INF/druid/wall"/>
        <property name="selelctAllow" value="true"/>
    </bean>

    <!-- sql防御自定义配置 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <!-- 指定装载配置的目录 -->
        <property name="dbType" value="mysql"/>
        <property name="config" ref="wall-filter-config"/>
        <!-- 对被认为是攻击SQL进行log.error输出 -->
        <property name="logViolation" value="true"/>
        <!-- 对被认为是攻击的SQL抛出SQLException -->
        <property name="throwException" value="true"/>
    </bean>

    <!-- 用于统计监控信息 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 标记为慢查询日志的时间 -->
        <property name="slowSqlMillis" value="3000"/>
        <!-- 慢查询的日志记录是否开放 -->
        <property name="logSlowSql" value="true"/>
        <!-- 合并sql -->
        <property name="mergeSql" value="true"/>
    </bean>

    <!-- 记录日志信息 -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="resultSetLogEnabled" value="true"/>
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <!-- 数据源配置，实现配置用户名与密码加密 -->
    <bean id="dataSource" class="com.neo.blog.base.config.DruidDESDataSource"
            init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.jdbcUrl}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>

        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>

        <!-- 配置间隔多久进行一次检测，检测需要关闭的空间链接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="300000"/>
        <!-- 配置一个链接在池中最小生存时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="18000000"/>
        <!-- 超过removeAbandonedTimeout时间后，是否进行没有链接(废弃)的回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 单位是妙 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误的日志，将会在回收事件后，在log中打印出回收Connection的错误信息，包括在哪个地方用了Connection却忘记关闭了，方便调试 -->
        <property name="logAbandoned" value="true"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>

    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 往下是mybatis和spring真正整合的配置 -->
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置mybatis全局配置文件：spring-mybatis.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描entity包，使用别名，多个用;隔开 -->
        <property name="typeAliasesPackage" value="com.neo.blog.entity"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>

    <!-- 扫描Dao接口包，动态实现DAO接口，注入到Spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口 -->
        <property name="basePackage" value="com.neo.blog.dao"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 拦截方式配置事务 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- SUPPORTS: 如果当前在事务中，即以事务的方式运行；如果当前不再是一个事务，那么就以非事务的形式运行 -->
            <!-- read-only: 只读形式，保证在多个查询中，数据的一致性 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <!-- REQUIRED: 假如当前正在要执行的事务不再另一个事务里，那么就起一个新的事务 -->
            <tx:method name="*" propagation="REQUIRED"/>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- Druid与Spring关联监控配置 -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.neo.blog.service.*</value>
                <value>com.neo.blog.dao.*</value>
            </list>
        </property>
    </bean>









</beans>