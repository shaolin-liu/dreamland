<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neo.blog.dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.neo.blog.entity.Article">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="is_private" jdbcType="BIT" property="isPrivate" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="TIMESTAMP" property="createBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_by" jdbcType="TIMESTAMP" property="updateBy" />
    <result column="user_avart_url" jdbcType="VARCHAR" property="userAvartUrl" />
    <result column="user_nick_name" jdbcType="VARCHAR" property="userNickName" />
    <result column="upvote_num" jdbcType="INTEGER" property="upvoteNum" />
    <result column="foot_num" jdbcType="INTEGER" property="footNum" />
    <result column="comment_num" jdbcType="INTEGER" property="commentNum" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.neo.blog.entity.Article">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, title, category, is_private, create_time, create_by, update_time, update_by, 
    user_avart_url, user_nick_name, upvote_num, foot_num, comment_num
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_article
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blog_article
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.neo.blog.entity.Article">
    insert into blog_article (id, user_id, title, 
      category, is_private, create_time, 
      create_by, update_time, update_by, 
      user_avart_url, user_nick_name, upvote_num, 
      foot_num, comment_num, content
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, 
      #{category,jdbcType=VARCHAR}, #{isPrivate,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=TIMESTAMP}, 
      #{userAvartUrl,jdbcType=VARCHAR}, #{userNickName,jdbcType=VARCHAR}, #{upvoteNum,jdbcType=INTEGER}, 
      #{footNum,jdbcType=INTEGER}, #{commentNum,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.neo.blog.entity.Article">
    insert into blog_article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="isPrivate != null">
        is_private,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="userAvartUrl != null">
        user_avart_url,
      </if>
      <if test="userNickName != null">
        user_nick_name,
      </if>
      <if test="upvoteNum != null">
        upvote_num,
      </if>
      <if test="footNum != null">
        foot_num,
      </if>
      <if test="commentNum != null">
        comment_num,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="isPrivate != null">
        #{isPrivate,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=TIMESTAMP},
      </if>
      <if test="userAvartUrl != null">
        #{userAvartUrl,jdbcType=VARCHAR},
      </if>
      <if test="userNickName != null">
        #{userNickName,jdbcType=VARCHAR},
      </if>
      <if test="upvoteNum != null">
        #{upvoteNum,jdbcType=INTEGER},
      </if>
      <if test="footNum != null">
        #{footNum,jdbcType=INTEGER},
      </if>
      <if test="commentNum != null">
        #{commentNum,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.neo.blog.entity.Article">
    update blog_article
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="isPrivate != null">
        is_private = #{isPrivate,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=TIMESTAMP},
      </if>
      <if test="userAvartUrl != null">
        user_avart_url = #{userAvartUrl,jdbcType=VARCHAR},
      </if>
      <if test="userNickName != null">
        user_nick_name = #{userNickName,jdbcType=VARCHAR},
      </if>
      <if test="upvoteNum != null">
        upvote_num = #{upvoteNum,jdbcType=INTEGER},
      </if>
      <if test="footNum != null">
        foot_num = #{footNum,jdbcType=INTEGER},
      </if>
      <if test="commentNum != null">
        comment_num = #{commentNum,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.neo.blog.entity.Article">
    update blog_article
    set user_id = #{userId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      is_private = #{isPrivate,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=TIMESTAMP},
      user_avart_url = #{userAvartUrl,jdbcType=VARCHAR},
      user_nick_name = #{userNickName,jdbcType=VARCHAR},
      upvote_num = #{upvoteNum,jdbcType=INTEGER},
      foot_num = #{footNum,jdbcType=INTEGER},
      comment_num = #{commentNum,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neo.blog.entity.Article">
    update blog_article
    set user_id = #{userId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      is_private = #{isPrivate,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=TIMESTAMP},
      user_avart_url = #{userAvartUrl,jdbcType=VARCHAR},
      user_nick_name = #{userNickName,jdbcType=VARCHAR},
      upvote_num = #{upvoteNum,jdbcType=INTEGER},
      foot_num = #{footNum,jdbcType=INTEGER},
      comment_num = #{commentNum,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>